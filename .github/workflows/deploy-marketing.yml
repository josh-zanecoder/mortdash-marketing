name: Marketing Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  PROJECT_ID: ameritrust
  SERVICE_NAME: ameritrust-mortdash-marketing
  REGION: us-west1
  ARTIFACT_REGISTRY: us-west1-docker.pkg.dev/ameritrust/ameritrust-mortdash-marketing
  SERVICE_ACCOUNT: 448528717330-compute@developer.gserviceaccount.com
  SECRET_NAME: ameritrust-mortdash-marketing
    
jobs:
  deploy:
    name: Marketing Deployment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_AMERITRUST }}

      - name: Fetch environment variables from Secret Manager
        id: secrets
        run: |
          echo "Fetching the .env content directly from Secret Manager and ensure it ends with a newline"
          gcloud secrets versions access latest --secret="${{ env.SECRET_NAME }}" --project=${{ env.PROJECT_ID }} | sed -e '$a\' > .env

      - name: Set all environment variables for build process
        run: |
          echo "Setting environment variables for build"
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" || "$line" == \#* || "$line" == "PORT="* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Skip empty lines and comments
            [[ -z "$key" ]] && continue
            # Mask sensitive values in GitHub Actions
            echo "::add-mask::$value"
            echo "$key=$value" >> $GITHUB_ENV
            echo "Added masked build variable: $key"
          done < .env

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Generate timestamp for unique version
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          # Create build args string from environment variables
          BUILD_ARGS=()
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" || "$line" == \#* || "$line" == "PORT="* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            escaped_value=$(printf '%s' "$value" | sed 's/"/\\"/g' | sed 's/\$/\\$/g' | sed 's/,/\\,/g')
            BUILD_ARGS+=(--build-arg "$key=$escaped_value")
          done < .env

          echo "Building Docker image with args: ${BUILD_ARGS[*]}"
          
          docker build "${BUILD_ARGS[@]}" -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ steps.timestamp.outputs.timestamp }} --no-cache .

          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ steps.timestamp.outputs.timestamp }}

      - name: Get current traffic allocation
        id: get-traffic
        run: |
          # Check if the service exists and get current revision info
          if gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} 2>/dev/null; then
            # Get the current active revision
            CURRENT_REVISION=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format="value(status.traffic.revisionName)" | head -n 1)
            echo "Current active revision: $CURRENT_REVISION"
            
            # Determine the next tag based on current revision
            if [[ $CURRENT_REVISION == *"-blue-"* ]]; then
              echo "current=blue" >> $GITHUB_OUTPUT
              echo "next=green" >> $GITHUB_OUTPUT
            else
              echo "current=green" >> $GITHUB_OUTPUT
              echo "next=blue" >> $GITHUB_OUTPUT
            fi
          else
            # Service doesn't exist yet, start with blue
            echo "current=none" >> $GITHUB_OUTPUT
            echo "next=blue" >> $GITHUB_OUTPUT
          fi

      - name: Convert .env to env.yaml
        run: |
          echo "Converting .env to env.yaml"
          echo "---" > env.yaml
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" || "$line" == \#* || "$line" == "PORT="* ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            # Escape double quotes and backslashes for YAML
            safe_value=$(printf '%s' "$value" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
            echo "$key: \"$safe_value\"" >> env.yaml
          done < .env

      - name: Deploy new revision
        id: deploy
        run: |
          # Create env vars string for deployment
          ENV_VARS=""
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" || "$line" == \#* || "$line" == "PORT="* ]] && continue
            
            # For Firebase private key, preserve the \\n as is
            if [[ "$key" == "FIREBASE_PRIVATE_KEY" ]]; then
              escaped_value=$(printf '%s' "$value" | sed 's/"/\\"/g' | sed 's/\$/\\$/g' | sed 's/,/\\,/g')
            else
              # Escape quotes, dollar signs, and commas
              escaped_value=$(printf '%s' "$value" | sed 's/"/\\"/g' | sed 's/\$/\\$/g' | sed 's/,/\\,/g')
            fi
            
            ENV_VARS="$ENV_VARS,${key}=${escaped_value}"
          done < .env
          
          # Remove leading comma and format for gcloud command
          ENV_VARS=${ENV_VARS#,}

          # Check if service exists
          if gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} 2>/dev/null; then
            # Service exists - deploy new revision with no traffic
            echo "Updating existing service..."
            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ steps.timestamp.outputs.timestamp }} \
              --region ${{ env.REGION }} \
              --platform managed \
              --allow-unauthenticated \
              --service-account ${{ env.SERVICE_ACCOUNT }} \
              --tag ${{ steps.get-traffic.outputs.next }} \
              --no-traffic \
              --timeout 300 \
              --cpu=1 \
              --memory=1Gi \
              --min-instances=1 \
              --max-instances=10 \
              --concurrency=80 \
              --execution-environment=gen2 \
              --env-vars-file=env.yaml
          else
            # Service doesn't exist - create new service
            echo "Creating new service..."
            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ steps.timestamp.outputs.timestamp }} \
              --region ${{ env.REGION }} \
              --platform managed \
              --allow-unauthenticated \
              --service-account ${{ env.SERVICE_ACCOUNT }} \
              --tag ${{ steps.get-traffic.outputs.next }} \
              --timeout 300 \
              --cpu=1 \
              --memory=1Gi \
              --min-instances=1 \
              --max-instances=10 \
              --concurrency=80 \
              --execution-environment=gen2 \
              --env-vars-file=env.yaml
          fi

      - name: Test new deployment
        id: test-deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format="value(status.url)")
          TAG_URL="${SERVICE_URL}/api/health?tag=${{ steps.get-traffic.outputs.next }}"
          echo "Testing URL: $TAG_URL"
          for i in {1..5}; do
            echo "Attempt $i: Testing connection..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$TAG_URL")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Test successful, proceeding with traffic migration"
              echo "test_success=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Test failed with status $HTTP_STATUS, retrying in 10 seconds..."
            sleep 10
          done
          echo "All test attempts failed"
          echo "test_success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Migrate traffic to new revision
        if: steps.test-deployment.outputs.test_success == 'true'
        run: |
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-tags ${{ steps.get-traffic.outputs.next }}=100

      - name: Rollback if test failed
        if: steps.test-deployment.outputs.test_success == 'false'
        run: |
          echo "Test failed, keeping traffic on current revision"
          # We don't need to do anything as the new revision has no traffic